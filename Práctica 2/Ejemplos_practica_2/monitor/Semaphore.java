/* Copyright 2007 Theodore S. Norvell. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:   1. Redistributions of source code must retain the above copyright notice,      this list of conditions and the following disclaimer.   2. Redistributions in binary form must reproduce the above copyright notice,      this list of conditions and the following disclaimer in the documentation      and/or other materials provided with the distribution.   3. Neither the source nor binary form shall be included in any product used by      or intended for use by any military organization. THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITYAND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THEODORENORVELL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, ORCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTEGOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USEOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package monitor;import java.util.LinkedList;import java.util.ListIterator;/** A FIFO semaphore. * @author Theodore S. Norvell * @version 2.0 *  */public class Semaphore{	// Each queue element is a a single use semaphore	class QueueElement {		final int priority ;		volatile boolean enabled  = false ;				QueueElement(int priority) { this.priority = priority ; }				synchronized void acquire() {			while( !enabled )				try {					wait() ;				} catch (InterruptedException e) {					throw new RuntimeException( "Unexpected interruption of "							+"thread in monitor.Semaphore.acquire" ) ; } }		synchronized void release() { enabled  = true ; notify() ; }	}	    volatile int s ;    // Invariant s >= 0 ;    final LinkedList<QueueElement> queue = new LinkedList<QueueElement>() ;    // Invariant. All elements on the queue are in an unenabled state.     /** Initialize the semaphore to a value greater or equal to 0 */    public Semaphore( int initial_value ) {    	Assertion.check( initial_value >= 0 ) ;        this.s = initial_value ; }        /** The P operation. If two threads are blocked at the same time, they will be served in FIFO order.     * <kbd>sem.acquire()</kbd> is equivalent to <kbd>acquire( Integer.MAX_VALUE )</kbd>.*/    public void acquire() { acquire( Integer.MAX_VALUE ) ; }        /** The P operation with a priority.     * @param priority The larger the integer, the less urgent the priority.     * If two thread are waiting with equal priority, they will complete acquire     * in FIFO order. */    public void acquire(int priority ) {    	QueueElement mine  ;    	synchronized(this) {    		if( s > 0 ) { --s ; return ; }    		mine = new QueueElement(priority) ;    		if( priority == Integer.MAX_VALUE )     			queue.add( mine ) ;    		else {    			ListIterator<QueueElement> it = queue.listIterator(0) ;    			int i = 0 ;    			while( it.hasNext() ) {    				QueueElement elem = it.next() ;    				if( elem.priority > priority ) break ;    				++i ; }    			queue.add(i, mine) ;    		} }    	mine.acquire() ;   }    /** The V operation */    public synchronized void release() {		QueueElement first = queue.poll() ;		if( first != null ) {			first.release() ;		} else {			++s ; } }}